<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Spider Help</title>
<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is Netscape Code.
   -
   - The Initial Developer of the Original Code is
   - Bob Clary.
   - Portions created by the Initial Developer are Copyright (C) 2003
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s): Bob Clary <http://bclary.com/>
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

    <script type="text/javascript" src="version.js"></script>    
    <style type="text/css">
      body { background: #fff; }
      h1 {text-align: center;}
      h1,h2,h3 { font-size: 1em; }
    </style>
  </head>
  <body onload="sayVersion()">
    <h1>Spider Help</h1>
    <ul>
    <li><a href="#about">About Spider</a></li>
    <li><a href="#considerations">Special Considerations</a>
    <ul>
    <li><a href="#security">Security Privileges</a></li>
    <li><a href="#prefs">Preferences</a></li>
    </ul>
    </li>

    <li><a href="#starting">Starting Spider</a>
    <ul>
    <li><a href="#data">Data</a></li>
    <li><a href="#error">Error Output</a></li>
    <li><a href="#userhooks">User Hooks</a></li>
    <li><a href="#controls">Controls</a></li>
    </ul>
    </li>
    <li><a href="#license">License</a></li>
    </ul>

    <h2><a name="about">About Spider</a></h2>

    <p>

    Spider is a Firefox extension which can recursively visit the
    pages of a web site. It is customizable to perform arbitrary
    processing on the web content it visits and is especially useful
    in performing quality assurance tasks on web content. Spider is
    supported only by Gecko-based browsers.

    </p>

    <p>

    To learn more about Spider, visit
    its <a href="http://bclary.com/2004/07/10/mozilla-spiders"
    target="_blank">home page</a> or subscribe
    to <a href="http://bclary.com/home.rss"
    target="_blank">http://bclary.com/home.rss</a> where announcements
    regarding new versions are made.

    </p>

    <p>

    This software is a modified version of the CSpider application
    hosted
    at <a href="http://devedge-temp.mozilla.org/toolbox/examples/2003/CSpider/index_en.html"
    target="_blank">http://devedge-temp.mozilla.org/toolbox/examples/2003/CSpider/</a>.

    </p>

    <p>
    Developers can learn more about the internal operation of the CSpider
    JavaScript Class which provides the basic framework for this application 
    from <a href="CSpider.xhtml" target="_blank">CSpider JavaScript Class manpage</a>
    </p>

    <h2><a name="considerations">Special Considerations</a></h2>

    <h3><a name="security">Security Privileges</a></h3>

    <p>

    Spider is capable of capturing error messages and spidering sites
    from other domains through the use of extended security
    privileges.

    </p>


    <h3><a name="prefs">Preferences</a></h3>


    <h3>Useful Preferences</h3>

    <p>

    <code>javascript.options.strict</code> enables Firefox to report
    on JavaScript strict warnings which are very useful in determining
    potential problem areas in scripts.
    <code>javascript.options.showInConsole</code> can be used
    to report internal browser errors to the JavaScript console
    and is useful for Firefox developers.

    </p>

    <pre>
user_pref("javascript.options.strict", true);
user_pref("javascript.options.showInConsole", true);
</pre>

    <p>
    If you need to Spider sites which require authentication, the following
    preferences can be useful to automatically negotiate authentication
    credentials for specific sites and domains.
    </p>

      <pre> // basic authentication
 user_pref("network.negotiate-auth.trusted-uris", site-list);
 user_pref("network.negotiate-auth.delegation-uris", site-list);

 // ntlm authentication
  user_pref("network.automatic-ntlm-auth.allow-proxies", true);
  user_pref("network.automatic-ntlm-auth.trusted-uris", site-list);

 // Confirm user intent whenever URL of the form 
 // http://user:pass@my.site.com is accessed?
 user_pref("network.http.defensive-auth-prompting", false);
</pre>

<p>
where <code>site-list</code> is a string containing a comma-delimited
list of protocols, sites or domains. <strong>Be careful not to
unintentially broaden the scope of sites where authentication
negotiation is used since it might expose your credentials to
crackers.</strong>
</p>

      <p>
        In order for automatic negotiation to work, you will need to
	be logged into your local machine using the same credentials
	that are used on the remote site. You can find more
	information about these preferences in Nigel McFarlane's <a
	href="http://www.oreilly.com/catalog/firefoxhks/" target="_blank">Firefox
	Hacks</a> (<a
	href="http://open.itworld.com/5037/book_050425firefoxhacks/pfindex.html" target="_blank">online</a>).
      </p>


    <h2><a name="starting">Starting Spider</a></h2>

    <p>
    Spider is run as a standalone instance of Firefox.  Spider sends
    logging output to both the JavaScript console and to STDOUT if the
    dump function is enabled.  Since the JavaScript console is limited
    in the number of messages it may contain, it is important to also
    send the logging messages to STDOUT. This allows the results of a
    Spider run to be collected in a text file for later review and
    processing. In order to see this output you should start Firefox
    from the command line and redirect STDOUT to a text file.
    
    </p>
    The following command will start Firefox, automatically select the profile
    test, load Spider and direct all output to the file test.log.

    </p>

      <pre>
      firefox -P test -spider &gt; test.log 2&gt;&amp;1
      </pre>
    
    <p><strong><a name="starting-cmdline-args">via command line with command line arguments</a></strong></p>

<pre>
-spider              Start Spider (required)
-url &lt;url&gt;           Spider site at &lt;url&gt;
-uri &lt;url&gt;           Spider site at &lt;uri&gt;
-domain &lt;domain&gt;     Restrict Spider to urls matching &lt;domain&gt;
-depth &lt;depth&gt;       Spider to depth of &lt;depth&gt;
-timeout &lt;timeout&gt;   Time out Spider if page takes more than &lt;timeout&gt;
                     seconds
-wait &lt;wait&gt;         Pause Spider for &lt;wait&gt; seconds after each page
-hook &lt;hookscript&gt;   Execute Spider &lt;hookscript&gt;
-start               Automatically start Spider
-quit                Automatically quit when finished
-robot               Obey robots.txt
-fileurls            Allow file:// urls
-debug               Debug Spider
-jserrors            Display JavaScript errors
-jswarnings          Display JavaScript warnings
-chromeerrors        Display chrome errors
-xblerrors           Display XBL errors
-csserrors           Display CSS errors
-httprequests        Display HTTP requests
-invisible           Hide loaded page
</pre>

<p>
The previous example can be rewritten as
</p>
<pre>firefox -P test -spider -url http://bclary.com/ -domain bclary.com -depth 2 -start</pre>
      </dd> 

</dl>

    <h3><a name="data">Data</a></h3>
    <dl>
    <dt>URL</dt>
    <dd>
    <p>
    URL is the location which you wish to spider. This can be a
    fully qualified domain such as <code>http://www.example.com/</code> or
    a partial domain such as <code>example.com</code>.
    </p>
    </dd>
    <dt>Domain</dt>
    <dd>
    <p>
    Domain is used to restrict Spider to follow links on a specific domain.
    If this value is not specified, it will be generated from the URL by
    removing the protocol and any leading www.
    </p>
    <p>
    Domain is useful when you wish to start at a given URL but do not
    wish to restrict Spider to URLs which contain the initial URL.
    </p>
    </dd>
    <dt>Depth</dt>
    <dd>
    <p>
    Depth is the number of links to follow during the spider. 
    0 will load only the initial page. 1 will load the initial page plus
    all pages linked from the initial page.
    </p>
    <p>
    A specified Depth will reach the same set of pages that an 
    imaginary visitor would reach using the same number of mouse 
    clicks.
    </p>
    </dd>

    <dt>Page timeout</dt>
    <dd>
    <p>
    The number of seconds that Spider will wait for an external page to 
    load before firing CSpider.mOnPageTimeout() and entering the 
    <code>paused</code> state.
    </p>
    </dd>

    <dt>Page wait time</dt>
    <dd>
    <p>
    The number of seconds that Spider will wait after a page has
    displayed before beginning to load the next page. This can be
    use to allow the user time to visually inspect the page.
    </p>
    </dd>
    <dt>Wait for User Hook</dt>
    <dd>
    <p>
    Instead of waiting a specified number of seconds before loading the
    next page, "Wait for User Hook" will cause the spider to wait until
    the global variable <code>gPageCompleted</code> is set to true.
    </p>
    <p>
    "Wait for User Hook" is useful for situations where processing of the
    loaded page's content may take an arbitrary amount of time and where
    the User Hook functions need to control page transitions.
    </p>
    </dd>
    <dt>Autostart</dt>
    <dd>
    <p>
      Autostart will cause Spider to automatically begin loading pages
      when it first loads.
    </p>
    </dd>
    <dt>Autoquit</dt>
    <dd>
    <p>
    Autoquit will cause Spider to automatically exit when it has completed its run, i.e. reached 
    the <em>Stopped</em> state.
    </p>
    </dd>
    <dt>Restrict URLs</dt>
    <dd>
    <p>
    If Restrict URLs is checked, then the spider will only follow links
    which contain the Domain. For example if you enter 
    <code>http://www.example.com/</code> as the initial URL, 
    the spider will follow links of the form 
    <code>http://www.example.com/help/</code> but not 
    <code>http://www.foo.example.com/</code>. 
    </p>
    <p>
    If you wish to restrict the spider to a domain, simply enter the
    partial domain such as <code>example.com</code> which will follow
    all links which contain <code>example.com</code>.
    </p>
    <p>
    If you wish the spider to follow any link regardless of site or domain,
    uncheck Restrict URLs.
    </p>
    </dd>
    
    <dt>Respect robots.txt</dt>
    <dd>
    <p>
    If Respect robots.txt is checked, Spider will obey the rules specified
    in a site's robots.txt file and refuse to load blocked urls. 
    </p>
    </dd>

    <dt>Allow file urls</dt>
    <dd>
    <p>
    If Allow file urls is checked, Spider will follow file:/// urls. Note
    that this can have security implications since it allows Spider to follow
    file:// links from arbitrary pages on the web and is not enabled by default.
    </p>
    <p>
    Starting in Spider 0.0.4.0, Spider will allow you to load a file url
    as the starting url, but will not follow file links unless you have
    specified Allow file urls.
    </p>
    <p>
      This change has been made primarily to allow Spider to be used with
      local file based test cases and it not intended for use when spidering
      content on the wild wild web.
    </p>
    </dd>

    <dt>Debug spider</dt>
    <dd>
    <p>
    If Debug spider is checked, Spider will output debugging messages to
    the JavaScript Console and STDOUT. Only useful to someone hacking 
    Spider.
    </p>
    </dd>
    </dl>

    <h3><a name="error">Error Output</a></h3>
    <dl>
    <dt>JavaScript</dt>
    <dd>
    <dl>
    <dt>Errors</dt>
    <dd>
    <p>
    Select this option to send JavaScript Errors and Exceptions to stdout.
    </p>
    </dd>
    <dt>Warnings</dt>
    <dd>
    <p>
    Select this option to send JavaScript Warnings to stdout.
    </p>
    </dd>
    <dt>Chrome</dt>
    <dd>
    <p>
    Select this option to send Chrome Errors and  Warnings to stdout.
    </p>
    </dd>
    <dt>XBL</dt>
    <dd>
    <p>
    Select this option to send XBL Errors and  Warnings to stdout.
    </p>
    </dd>
    </dl>
    </dd>
    <dt>CSS Errors</dt>
    <dd>
    <p>
    Select this option to send CSS Errors and  Warnings to stdout.
    </p>
    </dd>
    </dl>

    <h3><a name="userhooks">User Hooks</a></h3>

    <dl>
      <dt>Script URL</dt>
      <dd>
      <p>

      Script URL is the location of an optional external JavaScript file which
      can be used to customize the operation of Spider through the use of any
      or all of the following functions. Note that the global object 
      <code>gSpider</code> exposes the same interface as 
      <code><a href="/projects/spider/spider/chrome/content/spider/CSpider.xhtml">CSpider</a></code>.
      
      </p>
      
      <p>
      
      <strong>WARNING: These functions will operate
        in the chrome security context of the browser.</strong>

      </p>

      <pre>
function userOnStart()
{
  // add custom code here
  // to be called by the Spider's mOnStart handler
}

function userOnBeforePage()
{
  // add custom code here
  // to be called by the Spider's mOnBeforePage handler
}

function userOnAfterPage()
{
  // add custom code here
  // to be called by the Spider's mOnAfterPage handler
  // this function is especially useful for performing
  // tests upon the DOM of a loaded web page.
  //
  // If "Wait for User Hook" is checked, then <code>userOnAfterPage()</code>
  // is responsible for setting the global variable <code>gPageCompleted</code>
  // in order to load the next page.
}

function userOnStop()
{
  // add custom code here
  // to be called by the Spider's mOnStop handler
}

function userOnPause()
{
  // add custom code here
  // to be called by the Spider's mOnPause handler
}

function userOnRestart()
{
  // add custom code here
  // to be called by the Spider's mOnRestart handler
}

function userOnPageTimeout()
{
  // add custom code here
  // to be called by the Spider's mOnPageTimeout handler
}

gConsoleListener.onConsoleMessage = 
function userOnConsoleMessage(s)
{
  // add custom code here to handle
  // the message which was sent to the
  // JavaScript Console and STDOUT.
  // You can use this function to
  // store messages in databases etc.
};

</pre>

      <p>
      Spider 0.1.18 introduced a function 
      <a href="http://bclary.com/projects/spider/spider/chrome/content/spider/script-loader.js">loadScript(aScriptUrl[, aScope])</a>
      which can be used by user hook functions to load additional utility scripts.
      This allows the modularization and reuse of user hook code.
      </p>

      
      </dd>
    </dl>


    <h3><a name="controls">Controls</a></h3>
    <dl>
      <dt><code>Run</code></dt>
      <dd>
      <p>
      <code>Run</code> will begin spidering the specified site.
      </p>
      </dd>
      <dt><code>Pause</code></dt>
      <dd>
      <p>
      <code>Pause</code> will cause the spider to enter the 
      <em>Paused</em> state after it finishes loading the current
      page. 
      </p>
      </dd>
      <dt><code>Restart</code></dt>
      <dd>
      <p>
      If the spider is <em>Paused</em> either because you 
      have clicked <code>Pause</code> or the spider has 
      timed out, you can press <code>Restart</code>
      to continue.
      </p>
      </dd>
      <dt><code>Stop</code></dt>
      <dd>
      <p>
      <code>Stop</code> will stop the spider.
      </p>
      </dd>
      <dt><code>Generate Spider URL</code></dt>
      <dd>
      <p>
      <code>Generate Spider URL</code> will open a new window
      with a link which can be used to open Spider and populate the Data
      inputs and optionally automatically <code>Run</code>
      Spider if <code>Autostart</code> is checked.
      </p>
      </dd>
      <dt><code>Reset</code></dt>
      <dd>
      <p>
      <code>Reset</code> will reset the Data inputs to their
      default values. Note that the URL containing any pre-existing
      query string value is not changed via <code>Reset</code>.
      </p>
      </dd>
    </dl>

    <h2><a name="license">License</a></h2>

    <p>

    This software is licensed under the MPL, GPL and LGPL licenses.
    View source to see the license agreement and read mozilla.org's 
    <a href="http://www.mozilla.org/MPL/" target="_blank">Mozilla &amp; Netscape Public Licenses</a> 
    for more details.

    </p>

    <div id="version">spider</div>

  </body>
</html>
