{
 "views":{ 

      "resubmission_urls_ud":{

         "sql":"SELECT sr.signature,
                       sr.url,
                       str.state,
                       COUNT(str.state) AS total_count,
                       DATE_FORMAT(str.datetime, '%Y-%m-%d %H:%i:%s') AS date
                 FROM SocorroRecord AS sr
                 JOIN SiteTestRun AS str ON sr.id = str.socorro_id
                 WHERE (str.datetime >= 'REP0' AND str.datetime <= 'REP1') AND sr.user_id = REP2 REP3
                 GROUP BY sr.signature, sr.url, str.state
                 ORDER BY str.datetime DESC",

         "host_type":"master_host"

      },
      "all_resubmission_urls_ud":{

         "sql":"SELECT au.email,
                       sr.signature,
                       sr.url,
                       str.state,
                       COUNT(str.state) AS total_count,
                       DATE_FORMAT(str.datetime, '%Y-%m-%d %H:%i:%s') AS date
                 FROM SocorroRecord AS sr
                 JOIN auth_user AS au ON sr.user_id = au.id
                 JOIN SiteTestRun AS str ON sr.id = str.socorro_id
                 WHERE (str.datetime >= 'REP0' AND str.datetime <= 'REP1') AND sr.user_id IS NOT NULL REP2
                 GROUP BY au.email, sr.signature, sr.url, str.state
                 ORDER BY str.datetime DESC",

         "host_type":"master_host"

      },
      "socorro_record":{

         "sql":"SELECT sr.id AS 'socorro_id',
                       sr.signature,
                       sr.url,
                       sr.uuid,
                       DATE_FORMAT(sr.client_crash_date, '%Y-%m-%d %H:%i:%s') AS client_crash_date, 
                       DATE_FORMAT(sr.date_processed, '%Y-%m-%d %H:%i:%s') AS date_processed,
                       sr.last_crash,
                       sr.product,
                       sr.build,
                       sr.branch,
                       sr.os_name,
                       sr.os_full_version,
                       sr.os_version,
                       sr.cpu_info,
                       sr.cpu_name,
                       sr.address,
                       sr.bug_list,
                       sr.user_comments,
                       sr.reason
                 FROM SocorroRecord AS sr
                 JOIN SiteTestRun AS str ON sr.id = str.socorro_id
                 WHERE (str.datetime >= 'REP0' AND str.datetime <= 'REP1') REP2 
                 LIMIT 1000",

         "host_type":"master_host"
      },
      "socorro_record_no_date":{

         "sql":"SELECT sr.id AS 'socorro_id',
                       sr.signature,
                       sr.url,
                       sr.uuid,
                       DATE_FORMAT(sr.client_crash_date, '%Y-%m-%d %H:%i:%s') AS client_crash_date, 
                       DATE_FORMAT(sr.date_processed, '%Y-%m-%d %H:%i:%s') AS date_processed,
                       sr.last_crash,
                       sr.product,
                       sr.build,
                       sr.branch,
                       sr.os_name,
                       sr.os_full_version,
                       sr.os_version,
                       sr.cpu_info,
                       sr.cpu_name,
                       sr.address,
                       sr.bug_list,
                       sr.user_comments,
                       sr.reason
                 FROM SocorroRecord AS sr
                 JOIN SiteTestRun AS str ON sr.id = str.socorro_id
                 WHERE REP0 
                 LIMIT 1000",

         "host_type":"master_host"
      },
      "crashes_st":{

            "sql":"SELECT c.signature,
                          str.fatal_message,
                          str.branch,
                          str.os_name,
                          str.os_version,
                          str.cpu_name,
                          str.build_cpu_name,
                          COUNT( c.id ) AS 'total_count'
                    FROM Crash AS c
                    JOIN SiteTestCrash AS stc ON c.id = stc.crash_id
                    JOIN SiteTestRun AS str ON stc.testrun_id = str.id
                    WHERE (stc.datetime >= 'REP0' AND stc.datetime <= 'REP1') REP2
                    GROUP BY c.signature,
                             str.fatal_message,
                             str.branch,
                             str.os_name,
                             str.os_version,
                             str.cpu_name
                    ORDER BY str.fatal_message DESC, c.signature ASC
                    LIMIT 1000",

            "host_type":"master_host"
      },
      "new_crash_signatures_st":{

            "sql":"SELECT c.signature,
                          str.fatal_message,
                          str.branch,
                          str.os_name,
                          str.os_version,
                          str.cpu_name,
                          str.build_cpu_name,
                          COUNT( c.id ) AS 'total_count'
                    FROM Crash AS c
                    JOIN SiteTestCrash AS stc ON c.id = stc.crash_id
                    JOIN SiteTestRun AS str ON stc.testrun_id = str.id
                    WHERE (stc.datetime >= 'REP0' AND stc.datetime <= 'REP1') AND 
                           c.id NOT IN (
                              SELECT c.id
                              FROM Crash AS c
                              JOIN SiteTestCrash AS stc ON c.id = stc.crash_id
                              WHERE (stc.datetime < 'REP0')) REP2
                    GROUP BY c.signature,
                             str.fatal_message,
                             str.branch,
                             str.os_name,
                             str.os_version,
                             str.cpu_name
                    ORDER BY str.fatal_message DESC, c.signature ASC
                    LIMIT 1000",

            "host_type":"master_host"
      },
      "temp_urls_st":{

            "sql":"CREATE TEMPORARY TABLE IF NOT EXISTS REP3 AS 
                   SELECT DISTINCT stc.url AS url
                   FROM Crash AS c
                   JOIN SiteTestCrash AS stc ON c.id = stc.crash_id
                   JOIN SiteTestRun AS str ON stc.testrun_id = str.id
                   WHERE (stc.datetime >= 'REP0' AND stc.datetime <= 'REP1') REP2",
            "host_type":"master_host"
      },
      "crash_detail_st":{

         "sql":"SELECT c.signature AS signature, 
                       str.fatal_message,
                       c.os_name,
                       c.os_version,
                       c.cpu_name,
                       c.build_cpu_name,
                       c.product,
                       c.branch,
                       stc.url,
                       DATE_FORMAT(stc.datetime, '%Y-%m-%d %H:%i:%s') AS 'datetime',
                       stc.reason,
                       stc.address,
                       stc.crashreport,
                       stc.crashtype,
                       stc.pluginfilename,
                       stc.pluginversion,
                       stc.exploitability,
                       str.log,
                       str.changeset,
                       str.bug_list,
                       str.steps,
                       str.exitstatus,
                       str.priority,
                       str.socorro_id
               FROM Crash AS c
               JOIN SiteTestCrash AS stc ON c.id = stc.crash_id
               JOIN SiteTestRun AS str ON stc.testrun_id = str.id
               WHERE stc.url IN (
                  SELECT url FROM REP2
               ) AND (str.datetime >= 'REP0' AND str.datetime <= 'REP1')
               LIMIT 1000",

         "host_type":"master_host"
      },
      "drop_temp_table":{

         "sql":"DROP TEMPORARY TABLE IF EXISTS REP0",

         "host_type":"master_host"

      },
      "crash_urls_st":{
         "sql":"SELECT DISTINCT(stc.url),
                       c.branch,
                       c.os_name,
                       c.os_version,
                       c.cpu_name,
                       c.build_cpu_name,
                       DATE_FORMAT(stc.datetime, '%Y-%m-%d %H:%i:%s') AS 'datetime',
                       COUNT(stc.url) AS 'total_count'
                 FROM Crash AS c
                 JOIN SiteTestCrash AS stc ON c.id = stc.crash_id
                 JOIN SiteTestRun AS str ON stc.testrun_id = str.id
                 WHERE (stc.datetime >= 'REP0' AND stc.datetime <= 'REP1') REP2
                 GROUP BY stc.url, c.branch, c.os_name, c.os_version, c.build_cpu_name
                 ORDER BY stc.datetime DESC
                 LIMIT 1000",

         "host_type":"master_host"
      },

      "assertions_st":{

         "sql":"SELECT a.assertion,
                       a.location,
                       a.branch,
                       a.os_name,
                       a.os_version,
                       a.cpu_name,
                       a.build_cpu_name,
                       COUNT( a.id ) AS 'total_count',
                       SUM( sta.count ) AS 'occurrence_count'
                FROM Assertion AS a
                JOIN SiteTestAssertion AS sta ON a.id = sta.assertion_id
                WHERE (sta.datetime >= 'REP0' AND sta.datetime <= 'REP1') REP2
                GROUP BY a.assertion,
                         a.location,
                         a.branch,
                         a.os_name,
                         a.os_version,
                         a.cpu_name,
                         a.build_cpu_name
                ORDER BY a.assertion ASC
                LIMIT 1000",

         "host_type":"master_host"

      },

      "new_assertions_st":{

            "sql":"SELECT a.assertion,
                          a.location,
                          a.branch,
                          a.os_name,
                          a.os_version,
                          a.cpu_name,
                          a.build_cpu_name,
                          COUNT( a.id ) AS 'total_count',
                          SUM( sta.count ) AS 'occurrence_count'
                    FROM Assertion AS a
                    JOIN SiteTestAssertion AS sta ON a.id = sta.assertion_id
                    WHERE (sta.datetime >= 'REP0' AND sta.datetime <= 'REP1') AND 
                           a.id NOT IN (
                              SELECT a.id
                              FROM Assertion AS a
                              JOIN SiteTestAssertion AS sta ON a.id = sta.assertion_id
                              WHERE (sta.datetime < 'REP0')) REP2
                    GROUP BY a.assertion,
                             a.location,
                             a.branch,
                             a.os_name,
                             a.os_version,
                             a.cpu_name,
                             a.build_cpu_name
                    ORDER BY a.assertion ASC
                    LIMIT 1000",

            "host_type":"master_host"
      },

      "assertion_urls_st":{

         "sql":"SELECT DISTINCT(sta.url),
                       a.branch,
                       a.os_name,
                       a.os_version,
                       a.cpu_name,
                       a.build_cpu_name,
                       DATE_FORMAT(sta.datetime, '%Y-%m-%d %H:%i:%s') AS 'datetime',
                       COUNT(sta.url) AS 'total_count',
                       SUM( sta.count ) AS 'occurrence_count'
                 FROM Assertion AS a
                 JOIN SiteTestAssertion AS sta ON a.id = sta.assertion_id
                 WHERE (sta.datetime >= 'REP0' AND sta.datetime <= 'REP1') REP2
                 GROUP BY sta.url, a.branch, a.os_name, a.os_version, a.build_cpu_name
                 ORDER BY sta.datetime DESC
                 LIMIT 1000",

         "host_type":"master_host"
      },

      "temp_assertion_urls_st":{

            "sql":"CREATE TEMPORARY TABLE IF NOT EXISTS REP3 AS 
                   SELECT DISTINCT sta.url AS url
                   FROM Assertion AS a
                   JOIN SiteTestAssertion AS sta ON a.id = sta.assertion_id
                   WHERE (sta.datetime >= 'REP0' AND sta.datetime <= 'REP1') REP2",

            "host_type":"master_host"
      },

      "assertion_detail_st":{

         "sql":"SELECT a.assertion, 
                       a.location,
                       a.os_name,
                       a.os_version,
                       a.cpu_name,
                       a.build_cpu_name,
                       a.product,
                       a.branch,
                       sta.url,
                       DATE_FORMAT(sta.datetime, '%Y-%m-%d %H:%i:%s') AS 'datetime',
                       sta.stack,
                       sta.count,
                       str.log,
                       str.changeset,
                       str.bug_list,
                       str.steps,
                       str.exitstatus,
                       str.priority,
                       str.socorro_id
               FROM Assertion AS a 
               JOIN SiteTestAssertion AS sta ON a.id = sta.assertion_id
               JOIN SiteTestRun AS str ON sta.testrun_id = str.id
               WHERE sta.url IN (
                  SELECT url FROM REP2
               ) AND (sta.datetime >= 'REP0' AND sta.datetime <= 'REP1')
               LIMIT 1000",

         "host_type":"master_host"
      },

      "crashes_ut":{

            "sql":"SELECT c.signature,
                          utr.fatal_message,
                          utr.branch,
                          utr.os_name,
                          utr.os_version,
                          utr.cpu_name,
                          utr.build_cpu_name,
                          COUNT( c.id ) AS 'total_count'
                    FROM Crash AS c
                    JOIN UnitTestCrash AS utc ON c.id = utc.crash_id
                    JOIN UnitTestRun AS utr ON utc.testrun_id = utr.id
                    WHERE (utc.datetime >= 'REP0' AND utc.datetime <= 'REP1') REP2
                    GROUP BY c.signature,
                             utr.fatal_message,
                             utr.branch,
                             utr.os_name,
                             utr.os_version,
                             utr.cpu_name
                    ORDER BY utr.fatal_message DESC, c.signature ASC
                    LIMIT 1000",

            "host_type":"master_host"
      },
      "new_crash_signatures_ut":{

            "sql":"SELECT c.signature,
                          utr.fatal_message,
                          utr.branch,
                          utr.os_name,
                          utr.os_version,
                          utr.cpu_name,
                          utr.build_cpu_name,
                          COUNT( c.id ) AS 'total_count'
                    FROM Crash AS c
                    JOIN UnitTestCrash AS utc ON c.id = utc.crash_id
                    JOIN UnitTestRun AS utr ON utc.testrun_id = utr.id
                    WHERE (utc.datetime >= 'REP0' AND utc.datetime <= 'REP1') AND 
                           c.id NOT IN (
                              SELECT c.id
                              FROM Crash AS c
                              JOIN UnitTestCrash AS utc ON c.id = utc.crash_id
                              WHERE (utc.datetime < 'REP0')) REP2
                    GROUP BY c.signature,
                             utr.fatal_message,
                             utr.branch,
                             utr.os_name,
                             utr.os_version,
                             utr.cpu_name
                    ORDER BY utr.fatal_message DESC, c.signature ASC
                    LIMIT 1000",

            "host_type":"master_host"
      },
      "assertions_ut":{

         "sql":"SELECT a.assertion,
                       a.location,
                       a.branch,
                       a.os_name,
                       a.os_version,
                       a.cpu_name,
                       a.build_cpu_name,
                       COUNT( a.id ) AS 'total_count',
                       SUM( uta.count ) AS 'occurrence_count'
                FROM Assertion AS a
                JOIN UnitTestAssertion AS uta ON a.id = uta.assertion_id
                WHERE (uta.datetime >= 'REP0' AND uta.datetime <= 'REP1') REP2
                GROUP BY a.assertion,
                         a.location,
                         a.branch,
                         a.os_name,
                         a.os_version,
                         a.cpu_name,
                         a.build_cpu_name
                ORDER BY a.assertion ASC
                LIMIT 1000",

         "host_type":"master_host"

      },

      "new_assertions_ut":{

            "sql":"SELECT a.assertion,
                          a.location,
                          a.branch,
                          a.os_name,
                          a.os_version,
                          a.cpu_name,
                          a.build_cpu_name,
                          COUNT( a.id ) AS 'total_count',
                          SUM( uta.count ) AS 'occurrence_count'
                    FROM Assertion AS a
                    JOIN UnitTestAssertion AS uta ON a.id = uta.assertion_id
                    WHERE (uta.datetime >= 'REP0' AND uta.datetime <= 'REP1') AND 
                           a.id NOT IN (
                              SELECT a.id
                              FROM Assertion AS a
                              JOIN UnitTestAssertion AS uta ON a.id = uta.assertion_id
                              WHERE (uta.datetime < 'REP0')) REP2
                    GROUP BY a.assertion,
                             a.location,
                             a.branch,
                             a.os_name,
                             a.os_version,
                             a.cpu_name,
                             a.build_cpu_name
                    ORDER BY a.assertion ASC
                    LIMIT 1000",

            "host_type":"master_host"
      },

      "assertion_urls_ut":{

         "sql":"SELECT DISTINCT(uta.url),
                       a.branch,
                       a.os_name,
                       a.os_version,
                       a.cpu_name,
                       a.build_cpu_name,
                       DATE_FORMAT(uta.datetime, '%Y-%m-%d %H:%i:%s') AS 'datetime',
                       COUNT(uta.url) AS 'total_count',
                       SUM( uta.count ) AS 'occurrence_count'
                 FROM Assertion AS a
                 JOIN UnitTestAssertion AS uta ON a.id = uta.assertion_id
                 WHERE (uta.datetime >= 'REP0' AND uta.datetime <= 'REP1') REP2
                 GROUP BY uta.url, a.branch, a.os_name, a.os_version, a.build_cpu_name
                 ORDER BY uta.datetime DESC
                 LIMIT 1000",

         "host_type":"master_host"
      },

      "temp_assertion_urls_ut":{

            "sql":"CREATE TEMPORARY TABLE IF NOT EXISTS REP3 AS 
                   SELECT DISTINCT uta.url AS url
                   FROM Assertion AS a
                   JOIN UnitTestAssertion AS uta ON a.id = uta.assertion_id
                   WHERE (uta.datetime >= 'REP0' AND uta.datetime <= 'REP1') REP2",

            "host_type":"master_host"
      },

      "assertion_detail_ut":{

         "sql":"SELECT a.assertion, 
                       a.location,
                       a.os_name,
                       a.os_version,
                       a.cpu_name,
                       a.build_cpu_name,
                       a.product,
                       a.branch,
                       uta.url,
                       DATE_FORMAT(uta.datetime, '%Y-%m-%d %H:%i:%s') AS 'datetime',
                       uta.stack,
                       uta.count,
                       utr.log,
                       utr.changeset,
                       utr.exitstatus
               FROM Assertion AS a 
               JOIN UnitTestAssertion AS uta ON a.id = uta.assertion_id
               JOIN UnitTestRun AS utr ON uta.testrun_id = utr.id
               WHERE uta.url IN (
                  SELECT url FROM REP2
               ) AND (uta.datetime >= 'REP0' AND uta.datetime <= 'REP1')
               LIMIT 1000",

         "host_type":"master_host"
      },

      "valgrinds_ut":{

         "sql":"SELECT v.signature,
                       v.message,
                       v.branch,
                       v.os_name,
                       v.os_version,
                       v.cpu_name,
                       v.build_cpu_name,
                       COUNT( v.id ) AS 'total_count'
                FROM Valgrind AS v 
                JOIN UnitTestValgrind AS utv ON v.id = utv.valgrind_id
                WHERE (utv.datetime >= 'REP0' AND utv.datetime <= 'REP1') REP2
                GROUP BY v.signature,
                         v.message,
                         v.branch,
                         v.os_name,
                         v.os_version,
                         v.cpu_name,
                         v.build_cpu_name
                LIMIT 1000",

         "host_type":"master_host"

      },

      "new_valgrinds_ut":{

            "sql":"SELECT v.signature,
                          v.message,
                          v.branch,
                          v.os_name,
                          v.os_version,
                          v.cpu_name,
                          v.build_cpu_name,
                          COUNT( v.id ) AS 'total_count'
                    FROM Valgrind AS v 
                    JOIN UnitTestValgrind AS utv ON v.id = utv.valgrind_id
                    WHERE (utv.datetime >= 'REP0' AND utv.datetime <= 'REP1') AND 
                           v.id NOT IN (
                              SELECT v.id
                              FROM Valgrind AS v 
                              JOIN UnitTestValgrind AS utv ON v.id = utv.valgrind_id
                              WHERE (utv.datetime < 'REP0')) REP2
                    GROUP BY v.signature,
                             v.message,
                             v.branch,
                             v.os_name,
                             v.os_version,
                             v.cpu_name,
                             v.build_cpu_name
                    LIMIT 1000",

            "host_type":"master_host"
      },

      "valgrind_urls_ut":{

         "sql":"SELECT DISTINCT(utv.url),
                       v.branch,
                       v.os_name,
                       v.os_version,
                       v.cpu_name,
                       v.build_cpu_name,
                       DATE_FORMAT(utv.datetime, '%Y-%m-%d %H:%i:%s') AS 'datetime',
                       COUNT(utv.url) AS 'total_count'
                 FROM Valgrind AS v
                 JOIN UnitTestValgrind AS utv ON v.id = utv.valgrind_id
                 WHERE (utv.datetime >= 'REP0' AND utv.datetime <= 'REP1') REP2
                 GROUP BY utv.url, v.branch, v.os_name, v.os_version, v.build_cpu_name
                 ORDER BY utv.datetime DESC
                 LIMIT 1000",

         "host_type":"master_host"
      },

      "temp_valgrind_urls_ut":{

            "sql":"CREATE TEMPORARY TABLE IF NOT EXISTS REP3 AS 
                   SELECT DISTINCT utv.url AS url
                   FROM Valgrind AS v
                   JOIN UnitTestValgrind AS utv ON v.id = utv.valgrind_id
                   WHERE (utv.datetime >= 'REP0' AND utv.datetime <= 'REP1') REP2",

            "host_type":"master_host"
      },

      "valgrind_detail_ut":{

         "sql":"SELECT v.signature, 
                       v.message,
                       v.os_name,
                       v.os_version,
                       v.cpu_name,
                       v.build_cpu_name,
                       v.product,
                       v.branch,
                       utv.url,
                       DATE_FORMAT(utv.datetime, '%Y-%m-%d %H:%i:%s') AS 'datetime',
                       utv.stack,
                       utv.count,
                       utr.log,
                       utr.changeset,
                       utr.exitstatus
               FROM Valgrind AS v
               JOIN UnitTestValgrind AS utv ON v.id = utv.valgrind_id
               JOIN UnitTestRun AS utr ON utv.testrun_id = utr.id
               WHERE utv.url IN (
                  SELECT url FROM REP2
               ) AND (utv.datetime >= 'REP0' AND utv.datetime <= 'REP1')
               LIMIT 1000",

         "host_type":"master_host"
      }
   }
}

